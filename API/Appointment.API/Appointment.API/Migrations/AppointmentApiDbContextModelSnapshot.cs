// <auto-generated />
using System;
using Appointment.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Appointment.API.Migrations
{
    [DbContext(typeof(AppointmentApiDbContext))]
    partial class AppointmentApiDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Appointment.API.Models.Domain.Appt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MedicalRecordMedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PrescriptionId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("price")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("MedicalRecordMedId");

                    b.HasIndex("PrescriptionId");

                    b.HasIndex("UserId");

                    b.ToTable("Appts");
                });

            modelBuilder.Entity("Appointment.API.Models.Domain.Disease", b =>
                {
                    b.Property<Guid>("Dis_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Dis_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PrescriptionP_Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Dis_Id");

                    b.HasIndex("PrescriptionP_Id");

                    b.ToTable("Diseases");
                });

            modelBuilder.Entity("Appointment.API.Models.Domain.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Hospital")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("qualifications")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("Appointment.API.Models.Domain.MedicalRecord", b =>
                {
                    b.Property<Guid>("MedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MedId");

                    b.ToTable("MedicalRecords");
                });

            modelBuilder.Entity("Appointment.API.Models.Domain.Medication", b =>
                {
                    b.Property<int>("MedicationsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicationsId"), 1L, 1);

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("DisId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DiseaseDis_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MedicationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("MedicationsId");

                    b.HasIndex("DiseaseDis_Id");

                    b.ToTable("Medications");
                });

            modelBuilder.Entity("Appointment.API.Models.Domain.Prescription", b =>
                {
                    b.Property<Guid>("P_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("P_Id");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("Appointment.API.Models.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("BloodGrp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNo")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("Height")
                        .HasColumnType("real");

                    b.Property<Guid?>("MedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MedicalRecordMedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<float?>("Weight")
                        .HasColumnType("real");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MedicalRecordMedId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Appointment.API.Models.Domain.Appt", b =>
                {
                    b.HasOne("Appointment.API.Models.Domain.Doctor", "Doctor")
                        .WithMany("Appts")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Appointment.API.Models.Domain.MedicalRecord", null)
                        .WithMany("Appts")
                        .HasForeignKey("MedicalRecordMedId");

                    b.HasOne("Appointment.API.Models.Domain.Prescription", "Prescription")
                        .WithMany()
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Appointment.API.Models.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Prescription");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Appointment.API.Models.Domain.Disease", b =>
                {
                    b.HasOne("Appointment.API.Models.Domain.Prescription", null)
                        .WithMany("diseases")
                        .HasForeignKey("PrescriptionP_Id");
                });

            modelBuilder.Entity("Appointment.API.Models.Domain.Medication", b =>
                {
                    b.HasOne("Appointment.API.Models.Domain.Disease", "Disease")
                        .WithMany("Medications")
                        .HasForeignKey("DiseaseDis_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Disease");
                });

            modelBuilder.Entity("Appointment.API.Models.Domain.User", b =>
                {
                    b.HasOne("Appointment.API.Models.Domain.MedicalRecord", "MedicalRecord")
                        .WithMany()
                        .HasForeignKey("MedicalRecordMedId");

                    b.Navigation("MedicalRecord");
                });

            modelBuilder.Entity("Appointment.API.Models.Domain.Disease", b =>
                {
                    b.Navigation("Medications");
                });

            modelBuilder.Entity("Appointment.API.Models.Domain.Doctor", b =>
                {
                    b.Navigation("Appts");
                });

            modelBuilder.Entity("Appointment.API.Models.Domain.MedicalRecord", b =>
                {
                    b.Navigation("Appts");
                });

            modelBuilder.Entity("Appointment.API.Models.Domain.Prescription", b =>
                {
                    b.Navigation("diseases");
                });
#pragma warning restore 612, 618
        }
    }
}
